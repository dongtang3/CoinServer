name: Build and Deploy Java App to AWS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Set up Java JDK 17 
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    # Cache Maven dependencies to speed up the build
    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    # Build the Java application using Maven
    - name: Build with Maven
      run: mvn clean install

    # Upload the JAR artifact
    - name: Upload JAR Artifact
      uses: actions/upload-artifact@v2
      with:
        name: java-app
        path: target/*.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    # Checkout the code again
    - name: Checkout code
      uses: actions/checkout@v2

    # Download the JAR artifact from the previous step
    - name: Download JAR Artifact
      uses: actions/download-artifact@v2
      with:
        name: java-app

    # Set up AWS credentials using GitHub secrets
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    # Deploy to AWS EC2 (example with SCP and SSH)
    - name: Deploy to EC2
      run: |
        scp -i path/to/your-ec2-key.pem target/your-app.jar ec2-user@your-ec2-ip:/path/to/deploy/
        ssh -i path/to/your-ec2-key.pem ec2-user@your-ec2-ip "sudo systemctl restart your-java-app-service"
